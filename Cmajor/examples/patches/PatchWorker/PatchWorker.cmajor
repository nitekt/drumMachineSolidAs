/**
    This demo shows how to write a javascript worker thread, which sends
    events to and from the Cmajor code.

    In this example, the cmajor processor below just waits for events to
    be sent by the worker.js script to tell it what notes to play
*/
processor PlayNotesSentByJavascriptWorker
{
    output stream float audioOut;

    // our javascript worker will send chunks of data here to give us the audio sample to play
    input event AudioDataChunk sampleData;

    // our javascript worker will send integers to this input to trigger notes
    input event int noteToPlay;

    struct AudioDataChunk
    {
        float[512] frames;
        int sourceRoot, startPos, numFrames;
        float sampleRate;
    }

    event sampleData (AudioDataChunk data)
    {
        sourceRate = data.sampleRate;
        sourceRoot = data.sourceRoot;

        for (int i = 0; i < data.numFrames; ++i)
            if (data.startPos + i < audioData.size)
                audioData.at (data.startPos + i) = data.frames.at(i);
    }

    // This event handler will receive events from the worker thread and
    // in response will change the pitch being played
    event noteToPlay (int pitch)
    {
        let frequency = pitch != 0 ? std::notes::noteToFrequency (pitch) : 0.0f;
        indexDelta = (frequency / std::notes::noteToFrequency (sourceRoot)) * sourceRate * processor.period;
        currentIndex = 0;
    }

    float[80000] audioData;
    float sourceRate;
    float64 currentIndex, indexDelta;
    int sourceRoot;

    void main()
    {
        loop
        {
            if (indexDelta != 0)
            {
                audioOut <- audioData.readLinearInterpolated (currentIndex);
                currentIndex += indexDelta;

                if (currentIndex >= audioData.size)
                    indexDelta = 0;
            }

            advance();
        }
    }
}
