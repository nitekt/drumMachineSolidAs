graph Synth [[ main ]]
{
    input event std::midi::Message midiIn [[ name: "MIDI input" ]];

    // Input events for "FM voice"
      input event float32 amp_modulation [[ name: "amp modulation", group: "/v:voice/amp_modulation", min: 0.0f, max: 1.0f, init: 0.0f, step: 0.01f ]];
    input event float32 freq_modulation [[ name: "freq modulation", group: "/v:voice/freq_modulation", min: 1e+01f, max: 1e+03f, init: 2e+02f, step: 1.0f ]];

    // Input events for "reverb"
    input event float32 damp [[ name: "damp", group: "/v:freeverb/damp", min: 0.0f, max: 1.0f, init: 0.5f, step: 0.025f, meta_knob0: "1" ]];
    input event float32 roomsize [[ name: "roomsize", group: "/v:freeverb/roomsize", min: 0.0f, max: 1.0f, init: 0.9f, step: 0.025f, meta_knob1: "2" ]];
    input event float32 wet [[ name: "wet", group: "/v:freeverb/wet", min: 0.0f, max: 1.0f, init: 0.9f, step: 0.025f, meta_knob2: "3" ]];

    input dbScaler.gainDb [[ name: "volume", min: -36, max: 0, init: -12 ]];

    output stream float<2> out;

    let voiceCount = 16;

    node
    {
        voiceAllocator = std::voices::VoiceAllocator (voiceCount);
        voices = Voice[voiceCount];
        reverb = faust::freeverb;
        dbScaler = DbScaler;
    }

    connection
    {
        midiIn -> std::midi::MPEConverter -> voiceAllocator -> voices.eventIn;

        // Connect the input events to the FM voice
        amp_modulation -> voices.amp_modulation;
        freq_modulation -> voices.freq_modulation;

        // Connect the input events to the reverb
        damp     -> reverb.damp;
        roomsize -> reverb.roomsize;
        wet      -> reverb.wet;

        // Connect the output of the FM voice to the input of the reverb
        voices.output0 -> reverb.input0;
        voices.output1 -> reverb.input1;

        // Connect the output of the reverb to the output of the graph
        float<2> (reverb.output0, reverb.output1) -> dbScaler.in;
        dbScaler.out -> out;
    }
}

// The voice uses a Faust FM oscillator, and drives it with midi events
graph Voice
{
    input event (std::notes::NoteOn, std::notes::NoteOff) eventIn;
    input fm.*;

    output stream float output0, output1;

    node
    {
        noteToFaust = NoteToFaust;
        fm = faust::voice;
    }

    connection
    {
        eventIn -> noteToFaust.eventIn;
        noteToFaust.gate -> fm.gate;
        noteToFaust.freq -> fm.freq_carrier;

        fm.output0 -> output0;
        fm.output1 -> output1;
    }
}

/// Processor to convert note on/off events into control events for the Faust oscillator
processor NoteToFaust
{
    input event (std::notes::NoteOn, std::notes::NoteOff) eventIn;

    output event float freq, gate;

    event eventIn (std::notes::NoteOn e)
    {
        freq <- std::notes::noteToFrequency (e.pitch);
        gate <- e.velocity;
    }

    event eventIn (std::notes::NoteOff e)
    {
        gate <- 0.0f;
    }
}

processor DbScaler
{
    input stream float<2> in;
    output stream float<2> out;
    input event float32 gainDb [[ name: "Gain", min: -24.0, max: 24.0, step: 0.1, init: 0, unit: "db" ]];

    event gainDb (float v)
    {
        targetGain = std::levels::dBtoGain (v);
    }

    float gain = 1.0f;
    float targetGain = 1.0f;

    // Smooth changes over 10ms
    let smoothingFrames = int (processor.frequency * 0.01);

    void main()
    {
        loop
        {
            while (gain == targetGain)
            {
                out <- in * gain;
                advance();
            }

            let perFrameIncrement = (targetGain - gain) / smoothingFrames;

            loop (smoothingFrames)
            {
                gain += perFrameIncrement;
                out <- in * gain;
                advance();
            }

            gain = targetGain;
        }
    }
}
